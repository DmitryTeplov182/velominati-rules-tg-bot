#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Simple Daily Rules Scheduler
"""

import asyncio
import logging
from datetime import datetime, time, timedelta
from telegram import Bot
from simple_daily import SimpleDailyRules

class SimpleScheduler:
    def __init__(self, bot: Bot, daily_time: time = time(10, 0)):
        """Initialize simple scheduler"""
        self.bot = bot
        self.daily_time = daily_time
        self.daily_rules = SimpleDailyRules()
        self.running = False
        self.logger = logging.getLogger(__name__)
    
    async def start(self):
        """Start the scheduler"""
        self.running = True
        self.logger.info("üöÄ Simple Daily Rules Scheduler started (10:00 daily)")
        
        while self.running:
            try:
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
                await self.wait_until_next_run()
                
                if self.running:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –¥–Ω—è –≤–æ –≤—Å–µ –≥—Ä—É–ø–ø—ã
                    await self.send_daily_rules_to_all_groups()
                    
                    # –ñ–¥–µ–º 1 —á–∞—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                    await asyncio.sleep(3600)
                    
            except Exception as e:
                self.logger.error(f"Error in scheduler: {e}")
                await asyncio.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def stop(self):
        """Stop the scheduler"""
        self.running = False
        self.logger.info("üõë Simple Daily Rules Scheduler stopped")
    
    async def wait_until_next_run(self):
        """Wait until next scheduled time"""
        now = datetime.now()
        next_run = datetime.combine(now.date(), self.daily_time)
        
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        if now.time() >= self.daily_time:
            next_run += timedelta(days=1)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
        wait_seconds = (next_run - now).total_seconds()
        
        if wait_seconds > 0:
            self.logger.info(f"‚è∞ Next daily rule at {next_run.strftime('%Y-%m-%d %H:%M')}")
            await asyncio.sleep(wait_seconds)
    
    async def send_daily_rules_to_all_groups(self):
        """Send daily rules to all registered groups"""
        try:
            groups = self.daily_rules.groups
            
            if not groups:
                self.logger.info("üìù No groups registered for daily rules")
                return
            
            self.logger.info(f"üì§ Sending daily rules to {len(groups)} groups")
            
            for group_id_str in groups:
                try:
                    group_id = int(group_id_str)
                    await self.send_daily_rule_to_group(group_id)
                    await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    
                except Exception as e:
                    self.logger.error(f"Error sending to group {group_id_str}: {e}")
                    # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≥—Ä—É–ø–ø—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                    continue
            
            self.logger.info("‚úÖ Daily rules sent to all groups")
            
        except Exception as e:
            self.logger.error(f"Error in send_daily_rules_to_all_groups: {e}")
    
    async def send_daily_rule_to_group(self, group_id: int):
        """Send daily rule to specific group"""
        try:
            self.logger.info(f"üîç Getting daily rule for group {group_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª–æ –¥–Ω—è
            rule_data = self.daily_rules.get_daily_rule(group_id)
            
            if not rule_data:
                self.logger.warning(f"‚ö†Ô∏è No daily rule for group {group_id}")
                return
            
            self.logger.info(f"‚úÖ Got rule #{rule_data['rule_number']} for group {group_id}")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self.daily_rules.format_daily_rule_message(rule_data)
            
            self.logger.info(f"üì§ Sending message to group {group_id}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
            await self.bot.send_message(
                chat_id=group_id,
                text=message,
                parse_mode='Markdown'
            )
            
            self.logger.info(f"‚úÖ Daily rule #{rule_data['rule_number']} sent to group {group_id}")
            
        except Exception as e:
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ –¥—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞ - –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            self.logger.warning(f"‚ö†Ô∏è Could not send to group {group_id}: {e}")
            # –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –≥—Ä—É–ø–ø–∞–º–∏


async def test_scheduler():
    """Test the simple scheduler"""
    import os
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not token:
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Simple Scheduler")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
    bot = Bot(token=token)
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    scheduler = SimpleScheduler(bot)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–∞–≤–∏–ª–∞ –¥–Ω—è –≤ —Ç–µ—Å—Ç–æ–≤—É—é –≥—Ä—É–ø–ø—É
    test_group_id = 4841035709
    
    print(f"üì§ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ –≥—Ä—É–ø–ø—É {test_group_id}...")
    
    try:
        await scheduler.send_daily_rule_to_group(test_group_id)
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
    
    print("\nüìù –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("   üöÄ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: 10:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å")
    print("   –ì—Ä—É–ø–ø—ã: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ groups.json")


if __name__ == "__main__":
    asyncio.run(test_scheduler())
