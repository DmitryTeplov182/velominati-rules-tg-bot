#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Telegram Bot for Cycling Rules Search
"""

import os
import logging
import random
import asyncio
from typing import Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InlineQueryResultArticle, InputTextMessageContent
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, InlineQueryHandler, filters, ContextTypes
from search_rules import RulesSearcher
from daily_rules import SimpleDailyRules
from daily_scheduler import SimpleScheduler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class CyclingRulesBot:
    def __init__(self, token: str):
        """Initialize the bot with token and rules searcher"""
        self.token = token
        self.searcher = RulesSearcher()
        self.daily_rules = SimpleDailyRules()
        self.scheduler = None
        self.application = Application.builder().token(token).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """Setup bot command and message handlers"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("search", self.search_command))
        self.application.add_handler(CommandHandler("rule", self.rule_command))
        self.application.add_handler(CommandHandler("random", self.random_command))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback queries (–¥–ª—è inline –∫–Ω–æ–ø–æ–∫)
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        
        # Inline —Ä–µ–∂–∏–º - –ø–æ–∏—Å–∫ –≤ –ª—é–±–æ–º —á–∞—Ç–µ
        self.application.add_handler(InlineQueryHandler(self.handle_inline_query))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command"""
        welcome_text = (
            "üö¥‚Äç‚ôÇÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ü—Ä–∞–≤–∏–ª –í–µ–ª–æ—Å–∏–ø–µ–¥–∏—Å—Ç–æ–≤!\n\n"
            "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∏–∑ –∑–Ω–∞–º–µ–Ω–∏—Ç–æ–≥–æ —Å–≤–æ–¥–∞ –í–µ–ª–æ–º–∏–Ω–∞—Ç–∏.\n\n"
            "üîç –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
            "‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É –¥–ª—è –ø–æ–∏—Å–∫–∞\n"
            "‚Ä¢ –ò–ª–∏ –Ω–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5)\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π /search –¥–ª—è –ø–æ–∏—Å–∫–∞\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π /rule –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π /random –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏\n\n"
            "üí° Inline —Ä–µ–∂–∏–º: –ù–∞–ø–∏—à–∏ @–∏–º—è_–±–æ—Ç–∞ + –∑–∞–ø—Ä–æ—Å –≤ –ª—é–±–æ–º —á–∞—Ç–µ!\n"
            "üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ: –ù–∞–ø–∏—à–∏ '—Å–ª—É—á–∞–π–Ω–æ–µ' –∏–ª–∏ 'random' –≤ inline —Ä–µ–∂–∏–º–µ\n\n"
            "–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–∞—Ö!"
        )
        
        await update.message.reply_text(
            welcome_text
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /help command"""
        help_text = (
            "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
            "üîç –ü–æ–∏—Å–∫:\n"
            "‚Ä¢ –ù–∞–ø–∏—à–∏ –ª—é–±–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É\n"
            "‚Ä¢ –ë–æ—Ç –Ω–∞–π–¥–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞\n"
            "‚Ä¢ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –¥–≤—É—Ö —è–∑—ã–∫–∞—Ö\n\n"
            "üî¢ –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É:\n"
            "‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5)\n"
            "‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /rule 5\n\n"
            "üí° Inline —Ä–µ–∂–∏–º:\n"
            "‚Ä¢ –ù–∞–ø–∏—à–∏ @–∏–º—è_–±–æ—Ç–∞ + –∑–∞–ø—Ä–æ—Å –≤ –ª—é–±–æ–º —á–∞—Ç–µ\n"
            "‚Ä¢ –ù–∞–ø—Ä–∏–º–µ—Ä: @cycling_rules_bot —à–ª–µ–º\n"
            "‚Ä¢ –ò–ª–∏: @cycling_rules_bot 42\n\n"
            "üìù –ö–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
            "/search <–∑–∞–ø—Ä–æ—Å> - –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É\n"
            "/rule <–Ω–æ–º–µ—Ä> - –ù–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª–æ –ø–æ –Ω–æ–º–µ—Ä—É\n"
            "/random - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ\n\n"
            "üí° –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:\n"
            "‚Ä¢ —à–ª–µ–º\n"
            "‚Ä¢ bike\n"
            "‚Ä¢ training\n"
            "‚Ä¢ –Ω–∞–¥ –≥–æ–ª–æ–≤–æ–π\n"
            "‚Ä¢ 42\n"
            "‚Ä¢ —Å–ª—É—á–∞–π–Ω–æ–µ (–∏–ª–∏ random, üé≤)\n\n"
            "üéØ –ü—Ä–∞–≤–∏–ª–∞ –¥–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ –≥—Ä—É–ø–ø—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00"
        )
        
        await update.message.reply_text(
            help_text
        )
    
    async def search_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /search command"""
        if not context.args:
            await update.message.reply_text(
                "üîç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /search <–∑–∞–ø—Ä–æ—Å>\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                "/search —à–ª–µ–º\n"
                "/search bike\n"
                "/search training"
            )
            return
        
        query = " ".join(context.args)
        await self.perform_search(update, context, query)
    
    async def rule_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /rule command"""
        if not context.args:
            await update.message.reply_text(
                "üî¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /rule <–Ω–æ–º–µ—Ä>\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                "/rule 5\n"
                "/rule 42"
            )
            return
        
        try:
            rule_number = int(context.args[0])
            await self.show_rule(update, context, rule_number)
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /rule 5)"
            )
    
    async def random_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /random command"""
        try:
            rule_number = random.randint(1, 95)
            await self.show_rule(update, context, rule_number)
        except Exception as e:
            logger.error(f"Error showing random rule: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞."
            )
    

    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle text messages"""
        text = update.message.text.strip()
        
        if not text:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ–º
        if text.isdigit():
            rule_number = int(text)
            await self.show_rule(update, context, rule_number)
        else:
            # –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
            await self.perform_search(update, context, text)
    
    async def perform_search(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query: str):
        """Perform search and show results"""
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç" –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            results = self.searcher.fuzzy_search(query, threshold=0.5, max_results=5)
            
            if not results:
                await update.message.reply_text(
                    f"üîç –ü–æ–∏—Å–∫: {query}\n\n"
                    "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
                    "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    "‚Ä¢ –î—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n"
                    "‚Ä¢ –ë–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã\n"
                    "‚Ä¢ –ü–æ–∏—Å–∫ –Ω–∞ –¥—Ä—É–≥–æ–º —è–∑—ã–∫–µ"
                )
                return
            
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —ç—Ç–æ –ø—Ä—è–º–æ–µ –ø—Ä–∞–≤–∏–ª–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
            if len(results) == 1 and results[0].get('is_direct_rule', False):
                await self.show_rule(update, context, results[0]['rule_number'])
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
            await self.show_search_results(update, context, query, results)
            
        except Exception as e:
            logger.error(f"Error during search: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def show_search_results(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query: str, results: list):
        """Show search results with inline buttons"""
        # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        keyboard = []
        for result in results:
            button_text = f"–ü—Ä–∞–≤–∏–ª–æ {result['rule_number']}"
            callback_data = f"rule_{result['rule_number']}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_text = f"üîç –ü–æ–∏—Å–∫: {query}\n\n"
        results_text += f"üìã –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç(–æ–≤):\n\n"
        
        for i, result in enumerate(results, 1):
            # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
            eng_preview = result['text_eng'][:100] + "..." if len(result['text_eng']) > 100 else result['text_eng']
            rus_preview = result['text_rus'][:100] + "..." if len(result['text_rus']) > 100 else result['text_rus']
            
            results_text += f"{i}. –ü—Ä–∞–≤–∏–ª–æ {result['rule_number']}\n"
            results_text += f"   {eng_preview}\n"
            results_text += f"   {rus_preview}\n\n"
        
        results_text += "üí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–ª–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ"
        
        await update.message.reply_text(
            results_text,
            reply_markup=reply_markup
        )
    
    async def show_rule(self, update: Update, context: ContextTypes.DEFAULT_TYPE, rule_number: int):
        """Show a specific rule by number"""
        try:
            rule = self.searcher.search_by_rule_number(rule_number)
            
            if not rule:
                await update.message.reply_text(
                    f"‚ùå –ü—Ä–∞–≤–∏–ª–æ #{rule_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
                    "üí° –í—Å–µ–≥–æ –ø—Ä–∞–≤–∏–ª: 95 (–æ—Ç 1 –¥–æ 95)"
                )
                return
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª–æ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            rule_text = f"–ü—Ä–∞–≤–∏–ª–æ {rule['rule_number']}\n\n"
            rule_text += f"{rule['text_eng']}\n\n"
            rule_text += f"{rule['text_rus']}"
            
            await update.message.reply_text(
                rule_text
            )
            
        except Exception as e:
            logger.error(f"Error showing rule {rule_number}: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–∞–≤–∏–ª–∞ #{rule_number}"
            )
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle inline button callbacks"""
        query = update.callback_query
        await query.answer()
        
        if query.data.startswith("rule_"):
            try:
                rule_number = int(query.data.split("_")[1])
                await self.show_rule(update, context, rule_number)
            except (ValueError, IndexError):
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
    
    async def handle_inline_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle inline queries for searching rules in any chat"""
        query = update.inline_query.query.strip()
        
        if not query:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏ –ø—É—Å—Ç–æ–º –∑–∞–ø—Ä–æ—Å–µ
            results = [
                InlineQueryResultArticle(
                    id="help_1",
                    title="üîç –ü–æ–∏—Å–∫ –ø—Ä–∞–≤–∏–ª",
                    description="–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É –¥–ª—è –ø–æ–∏—Å–∫–∞",
                    input_message_content=InputTextMessageContent(
                        message_text="üîç –ü–æ–∏—Å–∫ –ø—Ä–∞–≤–∏–ª –≤–µ–ª–æ—Å–∏–ø–µ–¥–∏—Å—Ç–æ–≤\n\n–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–∞–≤–∏–ª."
                    )
                ),
                InlineQueryResultArticle(
                    id="help_2",
                    title="üî¢ –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É",
                    description="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5, 42)",
                    input_message_content=InputTextMessageContent(
                        message_text="üî¢ –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª–∞ –æ—Ç 1 –¥–æ 95."
                    )
                ),
                InlineQueryResultArticle(
                    id="help_3",
                    title="üí° –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤",
                    description="—à–ª–µ–º, bike, training, –Ω–∞–¥ –≥–æ–ª–æ–≤–æ–π",
                    input_message_content=InputTextMessageContent(
                        message_text="üí° –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:\n\n‚Ä¢ —à–ª–µ–º\n‚Ä¢ bike\n‚Ä¢ training\n‚Ä¢ –Ω–∞–¥ –≥–æ–ª–æ–≤–æ–π\n‚Ä¢ 42"
                    )
                ),
                InlineQueryResultArticle(
                    id="random_rule",
                    title="üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ",
                    description="–ù–∞–ø–∏—à–∏ random —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ",
                    input_message_content=InputTextMessageContent(
                        message_text="üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ\n\n–ù–∞–ø–∏—à–∏—Ç–µ @–∏–º—è_–±–æ—Ç–∞ + —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞."
                    )
                )
            ]
            await update.inline_query.answer(results)
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ
            random_keywords = ['—Å–ª—É—á–∞–π–Ω–æ–µ', 'random', '—Å–ª—É—á–∞–π–Ω–æ', '–ª—é–±–æ–µ', '–ª—é–±–æ–µ –ø—Ä–∞–≤–∏–ª–æ', 'random rule', 'üé≤', 'dice']
            is_random_request = any(keyword in query.lower() for keyword in random_keywords)
            
            if is_random_request:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ
                random_rule_number = random.randint(1, 95)
                random_rule = self.searcher.search_by_rule_number(random_rule_number)
                
                if random_rule:
                    message_text = f"üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ {random_rule['rule_number']}\n\n"
                    message_text += f"{random_rule['text_eng']}\n\n"
                    message_text += f"{random_rule['text_rus']}"
                    
                    random_result = InlineQueryResultArticle(
                        id=f"random_{random_rule_number}",
                        title=f"üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ {random_rule_number}",
                        description=f"–°–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ: {random_rule['text_rus'][:100]}...",
                        input_message_content=InputTextMessageContent(
                            message_text=message_text
                        )
                    )
                    
                    await update.inline_query.answer([random_result])
                    return
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
            search_results = self.searcher.fuzzy_search(query, threshold=0.4, max_results=10)
            
            if not search_results:
                # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
                results = [
                    InlineQueryResultArticle(
                        id="no_results",
                        title="‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                        description=f"–ó–∞–ø—Ä–æ—Å: {query}",
                        input_message_content=InputTextMessageContent(
                            message_text=f"üîç –ü–æ–∏—Å–∫: {query}\n\n‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã."
                        )
                    )
                ]
            else:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è inline —Ä–µ–∂–∏–º–∞
                results = []
                
                for i, result in enumerate(search_results):
                    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
                    rus_preview = result['text_rus'][:120] + "..." if len(result['text_rus']) > 120 else result['text_rus']
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –¥–≤—É—Ö —è–∑—ã–∫–∞—Ö)
                    message_text = f"–ü—Ä–∞–≤–∏–ª–æ {result['rule_number']}\n\n"
                    message_text += f"{result['text_eng']}\n\n"
                    message_text += f"{result['text_rus']}"
                    
                    # –°–æ–∑–¥–∞–µ–º inline —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ä—É—Å—Å–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
                    inline_result = InlineQueryResultArticle(
                        id=f"rule_{result['rule_number']}",
                        title=f"–ü—Ä–∞–≤–∏–ª–æ {result['rule_number']}",
                        description=rus_preview,
                        input_message_content=InputTextMessageContent(
                            message_text=message_text
                        )
                    )
                    results.append(inline_result)
            
            await update.inline_query.answer(results)
            
        except Exception as e:
            logger.error(f"Error in inline query: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error_result = [
                InlineQueryResultArticle(
                    id="error",
                    title="‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞",
                    description="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ",
                    input_message_content=InputTextMessageContent(
                        message_text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )
                )
            ]
            await update.inline_query.answer(error_result)
    
    def run(self):
        """Start the bot"""
        logger.info("Starting Cycling Rules Bot...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)
    
    async def run_with_scheduler(self):
        """Run bot with scheduler in async context"""
        logger.info("Starting Cycling Rules Bot with scheduler...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
        scheduler_task = asyncio.create_task(self.start_scheduler())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling()
        
        try:
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            await scheduler_task
        except asyncio.CancelledError:
            pass
        finally:
            await self.application.updater.stop()
            await self.application.stop()
            await self.application.shutdown()
    
    async def start_scheduler(self):
        """Start the daily rules scheduler"""
        try:
            from telegram import Bot
            bot = Bot(self.token)
            self.scheduler = SimpleScheduler(bot)
            await self.scheduler.start()
        except Exception as e:
            logger.error(f"Error starting scheduler: {e}")


def main():
    """Main function to run the bot"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not token:
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω: export TELEGRAM_BOT_TOKEN='your_token_here'")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = CyclingRulesBot(token)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º
        asyncio.run(bot.run_with_scheduler())
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        logging.error(f"Bot startup error: {e}")


if __name__ == "__main__":
    main()
